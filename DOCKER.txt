docker pull dpage/pgadmin4
docker run --name "pgadmin4" -p 5050:80 -e 'PGADMIN_DEFAULT_EMAIL=admin@admin.com' -e 'PGADMIN_DEFAULT_PASSWORD=postgres' -d dpage/pgadmin4

docker pull postgres
docker run --name postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=kubedeploywebapp -d postgres
docker run --name postgres -e ASPNETCORE_ENVIRONMENT=Development -e POSTGRES_USER=postgres -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=kubedeploywebapp -d postgres


docker compose up --build
docker build -t keenoncoding/kubedeployappservice .
docker push keenoncoding/kubedeployappservice

docker-compose restart coffeeshop --build



docker run --name testapp -d -p 4200:4200 testapp

docker build -t excamplewebapi .
docker run --name excamplewebapi -d -p 5052:80 excamplewebapi

docker build -t keenoncoding/kubedeployappservice .
-------------------------------------------------------------------
ANGULAR

Dockerfile

FROM node:18.10-alpine AS build
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm install -g @angular/cli
COPY . .
# RUN npm run build
CMD ["ng", "serve", "--host", "0.0.0.0"]

docker build -t web .
docker run --name web -d -p 4200:4200 web
-------------------------------------------------
FROM node:18.10-alpine AS build
WORKDIR /app
RUN npm install -g @angular/cli
COPY package.json package-lock.json ./
RUN npm install
COPY . .
# RUN npm run build
CMD ["ng", "serve", "--host", "0.0.0.0"]
-------------------------------------------------
FROM node:12.2.0 as build
WORKDIR /app
RUN npm install -g @angular/cli@7.3.9
COPY package.json package-lock.json ./
RUN npm install
COPY . .
# RUN npm run build
CMD ["ng", "serve", "--host", "0.0.0.0"]
-------------------------------------------------
FROM node:18.10-alpine AS build
WORKDIR /app
RUN npm install -g @angular/cli
COPY package.json package-lock.json ./
RUN npm install
COPY . .
ARG configuration=production
RUN npm run build -- --output-path=./dist/out --configuration $configuration
FROM nginx:latest
COPY --from=build /app/dist/out/ /usr/share/nginx/html
COPY ./nginx-custom.conf /etc/nginx/conf.d/default.conf



nginx-custom.conf

# Expires map
map $sent_http_content_type $expires {
    default                    off;
    text/html                  epoch;
    text/css                   max;
    application/json           max;
    application/javascript     max;
    ~image/                    max;
}

server {
  listen 80;
  location / {
      root /usr/share/nginx/html;
      index index.html index.htm;
      try_files $uri $uri/ /index.html =404;
    }
  expires $expires;
  gzip  on;
}
-------------------------------------------------



// RUN LOCALLY
docker build -t sophia .
docker run --name sophia -d -p 4200:80 sophia

// PUSH REPOSITORY
docker build -t keenoncoding/angularwithkube .
docker push keenoncoding/angularwithkube



docker run -d --hostname masstransit/rabbitmq --name rabbitmq -p 5672:5672 -p 15672:15672 masstransit/rabbitmq:latest

docker-compose.yaml

services:
  web:
    build:
      context: angular
      target: builder
    ports:
      - 4200:4200
    volumes:
      - ./angular:/project
      - /project/node_modules

